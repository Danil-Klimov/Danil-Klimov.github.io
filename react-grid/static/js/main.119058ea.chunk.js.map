{"version":3,"sources":["components/Table.js","components/Button.js","components/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["Table","createTable","_this","props","rows","map","item","react_default","a","createElement","key","cells","style","width","size","height","className","onMouseEnter","this","onMouseOver","Component","Button","concat","children","onClick","show","Object","objectSpread","position","TableContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","colIndex","rowIndex","delRowButton","delColButton","rowId","cellId","handleContainerMouseEnter","clearTimeout","timer","handleContainerMouseLeave","setTimeout","showDelButtons","handleTableMouseEnter","handleTableMouseOver","_ref","target","tagName","parentBorder","parseInt","getComputedStyle","offsetParent","borderWidth","setState","offsetTop","offsetLeft","cellIndex","closest","length","addRow","rowsCopy","newRows","toConsumableArray","addCol","cellsCopy","newCells","delRow","splice","delCol","initialRows","Array","initialHeight","fill","initialCells","initialWidth","onMouseLeave","components_Table","cellSize","components_Button","top","left","App","components_TableContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.119058ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Table extends Component {\r\n  createTable = () => {\r\n    return this.props.rows.map((item) => {\r\n      return <tr key={item}>{this.props.cells.map((item) => {\r\n        return <td key={item} style={{ width: this.props.size, height: this.props.size }}>{''}</td>\r\n      })}</tr>\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <table className=\"table\"\r\n        onMouseEnter={this.props.onMouseEnter}\r\n        onMouseOver={this.props.onMouseOver}>\r\n        <tbody>\r\n          {this.createTable()}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n  const className = `table__button ${props.className}`;\r\n  const size = {width: props.size, height: props.size};\r\n  if(props.children === '+') {\r\n    return (\r\n      <button className={`${className} table__button_add`}\r\n              style={size}\r\n              onClick={props.onClick}>\r\n        {props.children}\r\n      </button>\r\n    );\r\n  } else {\r\n    return (\r\n      <button className={`${className} table__button_del ${props.show ? \"show\" : \"\"}`}\r\n              style={{...props.position, ...size}}\r\n              onClick={props.onClick}>\r\n        {props.children}\r\n      </button>\r\n    );\r\n  }\r\n};\r\nexport default Button;","import React, { Component } from 'react';\r\nimport Table from \"./Table\";\r\nimport Button from \"./Button\";\r\n\r\nclass TableContainer extends Component {\r\n  state = {\r\n    colIndex: null,\r\n    rowIndex: null,\r\n    delRowButton: {\r\n      show: false,\r\n      position: null\r\n    },\r\n    delColButton: {\r\n      show: false,\r\n      position: null\r\n    },\r\n    rows: [],\r\n    cells: [],\r\n    rowId: 0,\r\n    cellId: 0,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    const initialRows = Array(this.props.initialHeight).fill('');\r\n    const initialCells = Array(this.props.initialWidth).fill('');\r\n    let rowId = this.state.rowId;\r\n    let cellId = this.state.cellId;\r\n    const rows = initialRows.map(() => rowId++);\r\n    const cells = initialCells.map(() => cellId++);\r\n    this.state = {\r\n      ...this.state,\r\n      cells: cells,\r\n      cellId: cellId,\r\n      rows: rows,\r\n      rowId: rowId\r\n    }\r\n  };\r\n\r\n  handleContainerMouseEnter = () => {\r\n    clearTimeout(this.timer)\r\n  };\r\n\r\n  handleContainerMouseLeave = () => {\r\n    this.timer = setTimeout(() => {\r\n      this.showDelButtons(false);\r\n    }, 100);\r\n  };\r\n\r\n  handleTableMouseEnter = () => {\r\n    this.showDelButtons(true);\r\n  };\r\n\r\n  handleTableMouseOver = ({ target }) => {\r\n    if (target.tagName === \"TD\") {\r\n      const delRowButton = this.state.delRowButton;\r\n      const delColButton = this.state.delColButton;\r\n      const parentBorder = parseInt(getComputedStyle(target.offsetParent).borderWidth);\r\n      this.setState({\r\n        delRowButton: { ...delRowButton, position: target.offsetTop + parentBorder},\r\n        delColButton: { ...delColButton, position: target.offsetLeft + parentBorder},\r\n        colIndex: target.cellIndex,\r\n        rowIndex: target.closest(\"tr\").rowIndex\r\n      })\r\n    }\r\n  };\r\n\r\n  showDelButtons = (show) => {\r\n    const delRowButton = this.state.delRowButton;\r\n    const delColButton = this.state.delColButton;\r\n    this.setState({\r\n      delRowButton: {...delRowButton, show: this.state.rows.length > 1 && show ? show : false},\r\n      delColButton: {...delColButton, show: this.state.cells.length > 1 && show ? show : false}\r\n    })\r\n  };\r\n\r\n  addRow = () => {\r\n    const rowsCopy = this.state.rows;\r\n    let rowId = this.state.rowId;\r\n    const newRows = [...rowsCopy, rowId++];\r\n    this.setState({ rows: newRows, rowId: rowId })\r\n  };\r\n\r\n  addCol = () => {\r\n    const cellsCopy = this.state.cells;\r\n    let cellId = this.state.cellId;\r\n    const newCells = [...cellsCopy, cellId++];\r\n    this.setState({ cells: newCells, cellId: cellId })\r\n  };\r\n\r\n  delRow = () => {\r\n    this.setState(() => {\r\n      const newRows = this.state.rows;\r\n      newRows.splice(this.state.rowIndex, 1);\r\n      return { rows: newRows }\r\n    });\r\n    this.showDelButtons();\r\n  };\r\n\r\n  delCol = () => {\r\n    this.setState(() => {\r\n      const newCells = this.state.cells;\r\n      newCells.splice(this.state.colIndex, 1);\r\n      return { cells: newCells }\r\n    });\r\n    this.showDelButtons();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"table-container\"\r\n        onMouseEnter={this.handleContainerMouseEnter}\r\n        onMouseLeave={this.handleContainerMouseLeave}>\r\n        <Table rows={this.state.rows}\r\n                cells={this.state.cells}\r\n                size={this.props.cellSize}\r\n                onMouseEnter={this.handleTableMouseEnter}\r\n                onMouseOver={this.handleTableMouseOver} />\r\n        <Button className={\"table__button_add-row\"}\r\n                size={this.props.cellSize}\r\n                onClick={this.addRow}>+</Button>\r\n        <Button className={\"table__button_add-col\"}\r\n                size={this.props.cellSize}\r\n                onClick={this.addCol}>+</Button>\r\n        <Button className={\"table__button_del-row\"}\r\n                size={this.props.cellSize}\r\n                show={this.state.delRowButton.show}\r\n                position={{ top: this.state.delRowButton.position }}\r\n                onClick={this.delRow}>-</Button>\r\n        <Button className={\"table__button_del-col\"}\r\n                size={this.props.cellSize}\r\n                show={this.state.delColButton.show}\r\n                position={{ left: this.state.delColButton.position }}\r\n                onClick={this.delCol}>-</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableContainer;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport TableContainer from './components/TableContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <TableContainer initialWidth={4}\n                      initialHeight={4}\n                      cellSize={50}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}