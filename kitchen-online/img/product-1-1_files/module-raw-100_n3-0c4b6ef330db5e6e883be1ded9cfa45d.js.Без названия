/// Used files (3): 
/// sites/all/modules/xlogic/xnodes/js/bbcode.js 
/// sites/all/modules/xlogic/xnodes/js/geo.js 
/// sites/all/modules/xlogic/xnodes/js/xmap.js 


/// BEGIN sites/all/modules/xlogic/xnodes/js/bbcode.js ///
jQuery.expr[':'].parents = function(a, i, m) {
  return jQuery(a).parents(m[3]).length < 1;
};

XSyst.onReady('xnodesBBCode', function(context){
  $('textarea[data-bbhelp=1]', context).once('bbhelp').each(function(){
    $(this).parent('.form-item').find('label').addClass('b-form-item-label').append('<a href="#" class="b-bbcode-help-ico b-xpopup-action b-xpopup-action_type_open" data-xpopup-content="#b-bbcode-help"></a>');
  });
  
  // ССЫЛКИ НА ФОТО И ВИДЕО-РОЛИКИ
  $('a.b-burl-link', context).once('bblink').each(function(){
    var $el = $(this);
    var href = $el.attr('href');
    
    if (href.match(/\/find\/video\/(.*)/g) || href.match(/(.*)\.(mpeg|avi|flw)$/g) || href.match(/(.*)(youtube\.com|youtu\.be|vimeo|rutube|myvi|sibnet|dailymotion)(.*)/g)){
      $el.addClass('_video');
    } 
    else if (href.match(/\/find\/photo\/(.*)/g) || href.match(/(.*)\.(jpg|jpeg|gif|png|svg)$/g)){
      $el.addClass('_photo');
    }
  });

  $(document).on('xpopup_window_ready', function(e, boxCtrl) { 
    // Если контент отображается в боксе и там есть ссылки на файлы в альбомах, то добавляем им режим открытия в окнах.
    $('.b-xpopup__content-container .b-burl-link._video, .b-xpopup__content-container .b-burl-link._photo').attr('data-xpopup-box-id', 10);
  });

  $('.b-burl-link._photo:not(._not_xbox)', context).attr('rel', 'xbox[bb-photos]');
  
  // BBCODE: SPOILER
  
  $('a.b-bbspoiler__link', context).once('spoiler').on('click', function(){
    var $el = $(this);

    if ($el.hasClass('_open') == true){
      $el.removeClass('_open');

      if ($el.next('.b-bbspoiler__content').size() > 0){
        $el.next('.b-bbspoiler__content').slideUp();
      } 
      else {
        $el.parent().next('.b-bbspoiler__content').slideUp();
      }
    } 
    else{
      $el.addClass('_open');

      if ($el.next('.b-bbspoiler__content').size() > 0){
        $el.next('.b-bbspoiler__content').slideDown();
      } 
      else {
        $el.parent().next('.b-bbspoiler__content').slideDown();
      }
    }
    
    return false;
  });

  // BBCODE: TOGGLES

  $('.b-bbtoggles', context).each(function(){
    var $el = $(this);

    if ($('.b-bbtoggler__link', $el).size() > 0) {
      $el.once('toggles').prepend('<div class="b-bbtoggles__menu"><div class="b-bbtoggles__menu-list"></div><span class="b-bbtoggles__menu-arrow"> </span></div>').find('.b-bbtoggler__link').each(function(){
        var menu = $(this).parents('.b-bbtoggles').find('.b-bbtoggles__menu .b-bbtoggles__menu-list');
        $(this).clone(true).appendTo(menu);
        $(this).remove();
      });

      $el.once('otoggles').each(function(){
        var active = $(this).attr('rel');

        if (active == '' || active == null || active == 0){ // Если активный таб не передан или первый.
          $('.b-bbtoggler__link:eq(0)', this).addClass('_open');
          $('#' + $('.b-bbtoggler__link:eq(0)', this).attr('rel')).slideDown();
        } 
        else {
          $('.b-bbtoggler__link:eq('+active+')', this).addClass('_open');
          $('#' + $('.b-bbtoggler__link:eq('+active+')', this).attr('rel')).slideDown();
        }
      });
    } 
    else {
      $(this).removeAttr('class');
    }
  });

  // BBCODE: TOGGLE

  $('.b-bbtoggler__link', context).once('toggler').on('click', function(){
    var $el = $(this);

    if ($el.hasClass('_open') == true){
      $el.parents('.b-bbtoggler').removeClass('_open');
      $el.removeClass('_open');
      $('#' + $el.attr('rel')).slideUp();
    } 
    else {
      var $wrapper = $el.parents('.b-bbtoggles');

      if (typeof($wrapper) != 'undefined'){
        if ($('.b-bbtoggles__menu', $wrapper).size() > 0){
          $('.b-bbtoggles__menu a', $wrapper).removeClass('_open');
          $('.b-bbtoggler__content', $wrapper).hide();
        }
      }
      
      $('#' + $el.attr('rel') + ' img').each(function() {
        if ($(this).attr('data-original') != null) {
          $(this).attr('src', $(this).attr('data-original')).removeAttr('data-original');
        }
      });
      
      $el.parents('.b-bbtoggler').addClass('_open');
      $el.addClass('_open');
      $('#' + $el.attr('rel')).slideDown();
    }

    return false;
  });
  
  // BBCODE: TOCSECTION
  
  $('.b-bb-toc__section', context).once('toc').on('click', function(){
    var section = $(this).attr('data-section');
    $('.b-bb-tocanchor.' + section).ScrollTo({offsetTop: '100px'});
    return false;
  });

  // BBCODE: EXAMPLE

  $('.b-bb-example-content', context).once('example').on('click', function(){
    exampleInsertClick($('.b-bb-example-content__example', this).html());
  });

  // BBCODE: QUOTE

  $('blockquote .bb-quote', context).once('quote').each(function(){
    if ($(this).prev('a.bb-quote-toggler').size() > 0){
      $(this).addClass('bb-quote-close').hide().prev('a.bb-quote-toggler').addClass('bb-quote-toggler-show').show().on('click', function(){
        if ($(this).next('.bb-quote').hasClass('bb-quote-close') == true){
          $(this).next('.bb-quote').show();
          $(this).remove();
        }

        return false;
      });
    }
  });

  if ($('.ymap', context).filter(':not(.yprocessed)').size() > 0) {
    var ymapsArr, scriptSrc;

    $('.ymap', context).filter(':not(.yprocessed)').addClass('yprocessed').each(function(){
      var $el = $(this);
      var mapParams = {
        'fun' : $el.attr('rel'),
        'id' : $el.attr('id'),
        'balloon' : $el.attr('balloon'),
        'zoom' : $el.attr('zoom'),
        'address' : $el.attr('address'),
        'ver' : $el.attr('ver'),
        'scroll' : $el.attr('scroll'),
        'hideControls' : $el.attr('hidecontrols'),
        'icoPath' : $el.attr('data-icopath')
      };


      if (typeof(ymapsArr) == "undefined") {
        scriptSrc = $el.attr('src');
        ymapsArr = new Array(mapParams);
      } 
      else {
        ymapsArr.push(mapParams);
      }
    });

    $.getScript(scriptSrc, function(){
      ymaps.ready(function(){
        for (var i = 0; i < ymapsArr.length; i++) {
          var ymapData = ymapsArr[i];

          if (ymapData.fun == 'ymapsInit' || ymapData.fun == 'ymapsInit2'){
            ymapData.address = ymapData.address.split(',');
          }

          ymapsActions[ymapData.fun](ymaps, ymapData.id, ymapData.address, ymapData.balloon, ymapData.zoom, ymapData.ver, ymapData.scroll, ymapData.hideControls, ymapData.icoPath);
        }
      });
    });
  }

});

///YANDEX maps
var ymapsActions = {
  ymapsGeocodeInit: function(ymaps, id, address, balloon, zoom, ver, scroll, hideControls, icoPath) { // Карта по адресу.
    ymaps.geocode(address, {results: 1}).then(function(res){
      var firstGeoObject = res.geoObjects.get(0);
      ymapsInitXMap(ymaps, id, firstGeoObject.geometry.getCoordinates(), balloon, zoom, ver, false, scroll, hideControls, icoPath);
    });
  },
  ymapsGeocodeInit2: function(ymaps, id, address, balloon, zoom, ver, scroll, hideControls, icoPath) { // Карта по адресу + открываем balloon.
    ymaps.geocode(address, {results: 1}).then(function(res){
      var firstGeoObject = res.geoObjects.get(0);
      ymapsInitXMap(ymaps, id, firstGeoObject.geometry.getCoordinates(), balloon, zoom, ver, true, scroll, hideControls, icoPath);
    });
  },
  ymapsInit: function(ymaps, id, coords, balloon, zoom, ver, scroll, hideControls, icoPath) { // Карта по координатам.
    ymapsInitXMap(ymaps, id, coords, balloon, zoom, ver, false, scroll, hideControls, icoPath);
  },
  ymapsInit2: function(ymaps, id, coords, balloon, zoom, ver, scroll, hideControls, icoPath) { // Карта по координатам + открываем balloon.
    ymapsInitXMap(ymaps, id, coords, balloon, zoom, ver, true, scroll, hideControls, icoPath);
  }
};

/*
 * Добавляем карту.
 */
function ymapsInitXMap(ymaps, id, coords, balloon, zoomSize, ver, openBalloon, scroll, hideControls, icoPath){
  var xMap = new ymaps.Map(id, {center: coords, zoom: zoomSize});
  var placemarkView = {preset: 'twirl#blueDotIcon'};

  if (ver <= 2.0) {
    xMap.controls.add('zoomControl').add('typeSelector').add('mapTools');
  }

  if (hideControls){
    xMap.controls.remove('searchControl').remove('typeSelector').remove('trafficControl').remove('rulerControl').remove('fullscreenControl').remove('geolocationControl');
  }

  if (scroll == 0){
    xMap.behaviors.disable('scrollZoom');
  }

  if (!XSyst._.isEmpty(icoPath)){
    placemarkView = {
      iconLayout: 'default#image',
      iconImageHref: icoPath, 
      iconImageSize: [30, 30], 
      iconImageOffset: [-15, -15], 
    };
  } 

  var xPlacemark = null;
  if (XSyst._.isEmpty(balloon)){
    xPlacemark = new ymaps.Placemark(coords, {}, placemarkView);
  } 
  else {
    xPlacemark = new ymaps.Placemark(coords, {balloonContent: balloon}, placemarkView);
  }

  xMap.geoObjects.add(xPlacemark);
  
  if (openBalloon && !XSyst._.isEmpty(balloon)){
    //Добавляем карту и показываем на ней раскрытый balloon
    xPlacemark.balloon.open();
  }
}



/*
 * Функция выполняет вставку текста "примера" в текствое поле.
 */
function exampleInsertClick(code){
  if ($('textarea#edit-body').size() > 0){
    if ($('textarea#edit-body').val().length == 0){
      $('textarea#edit-body').val(code + "\n", 'end');
    } 
    else {
      code = code.replace(/!text/gi, $('textarea#edit-body').val());
      code = $.trim(code);
      $('textarea#edit-body').val(code + "\n");
    }

    $('textarea#edit-body').focus();
    code = '';
  }

  $.xpopup.close();

  return false;
};
/// END sites/all/modules/xlogic/xnodes/js/bbcode.js ///

/// BEGIN sites/all/modules/xlogic/xnodes/js/geo.js ///
//****NOTE*****: SEE THIS NOTE REGARDING the 404
//http://code.google.com/p/geo-location-javascript/issues/detail?id=48

// Copyright 2007, Google Inc.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//  3. Neither the name of Google Inc. nor the names of its contributors may be
//     used to endorse or promote products derived from this software without
//     specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Sets up google.gears.*, which is *the only* supported way to access Gears.
//
// Circumvent this file at your own risk!
//
// In the future, Gears may automatically define google.gears.* without this
// file. Gears may use these objects to transparently fix bugs and compatibility
// issues. Applications that use the code below will continue to work seamlessly
// when that happens.

(function() {
  // We are already defined. Hooray!
  if (window.google && google.gears) {
    return;
  }

  var factory = null;

  // Firefox
  if (typeof(GearsFactory)!= 'undefined') {
    factory = new GearsFactory();
  } else {
    // IE
    try {
      factory = new ActiveXObject('Gears.Factory');
      // privateSetGlobalObject is only required and supported on IE Mobile on
      // WinCE.
      if (factory.getBuildInfo().indexOf('ie_mobile') != -1) {
        factory.privateSetGlobalObject(this);
      }
    } catch (e) {
      // Safari
      if ((typeof(navigator.mimeTypes) != 'undefined')
           && navigator.mimeTypes["application/x-googlegears"]) {
        factory = document.createElement("object");
        factory.style.display = "none";
        factory.width = 0;
        factory.height = 0;
        factory.type = "application/x-googlegears";
        document.documentElement.appendChild(factory);
        if(factory && (typeof(factory.create) == 'undefined')) {
          // If NP_Initialize() returns an error, factory will still be created.
          // We need to make sure this case doesn't cause Gears to appear to
          // have been initialized.
          factory = null;
        }
      }
    }
  }

  // *Do not* define any objects if Gears is not installed. This mimics the
  // behavior of Gears defining the objects in the future.
  if (!factory) {
    return;
  }

  // Now set up the objects, being careful not to overwrite anything.
  //
  // Note: In Internet Explorer for Windows Mobile, you can't add properties to
  // the window object. However, global objects are automatically added as
  // properties of the window object in all browsers.
  if (!window.google) {
    google = {};
  }

  if (!google.gears) {
    google.gears = {factory: factory};
  }
})();

//
//geo-location-javascript v0.4.8
//http://code.google.com/p/geo-location-javascript/
//
//Copyright (c) 2009 Stan Wiechers
//Licensed under the MIT licenses.
//
//Revision: $Rev: 81 $: 
//Author: $Author: whoisstan $:
//Date: $Date: 2012-04-17 17:50:53 -0400 (Tue, 17 Apr 2012) $:    
//
var bb_success;
var bb_error;
var bb_blackberryTimeout_id=-1;

function handleBlackBerryLocationTimeout()
{
	if(bb_blackberryTimeout_id!=-1)
	{
		bb_error({message:"Timeout error", code:3});
	}
}
function handleBlackBerryLocation()
{
		clearTimeout(bb_blackberryTimeout_id);
		bb_blackberryTimeout_id=-1;
        if (bb_success && bb_error)
        {
                if(blackberry.location.latitude==0 && blackberry.location.longitude==0)
                {
                        //http://dev.w3.org/geo/api/spec-source.html#position_unavailable_error
                        //POSITION_UNAVAILABLE (numeric value 2)
                        bb_error({message:"Position unavailable", code:2});
                }
                else
                {  
                        var timestamp=null;
                        //only available with 4.6 and later
                        //http://na.blackberry.com/eng/deliverables/8861/blackberry_location_568404_11.jsp
                        if (blackberry.location.timestamp)
                        {
                                timestamp=new Date(blackberry.location.timestamp);
                        }
                        bb_success({timestamp:timestamp, coords: {latitude:blackberry.location.latitude,longitude:blackberry.location.longitude}});
                }
                //since blackberry.location.removeLocationUpdate();
                //is not working as described http://na.blackberry.com/eng/deliverables/8861/blackberry_location_removeLocationUpdate_568409_11.jsp
                //the callback are set to null to indicate that the job is done

                bb_success = null;
                bb_error = null;
        }
}

var geo_position_js=function() {

        var pub = {};
        var provider=null;
		var u="undefined";

		pub.showMap = function(latitude,longitude)
		{
			if(typeof(blackberry)!=u)
			{
				blackberry.launch.newMap({"latitude":latitude*100000,"longitude":-longitude*100000});
			}
			else
			{
				window.location="http://maps.google.com/maps?q=loc:"+latitude+","+longitude;
			}
		}


        pub.getCurrentPosition = function(success,error,opts)
        {
                provider.getCurrentPosition(success, error,opts);
        }
		

        pub.init = function()
        {			
                try
                {
                        if (typeof(geo_position_js_simulator)!=u)
                        {
                                provider=geo_position_js_simulator;
                        }
                        else if (typeof(bondi)!=u && typeof(bondi.geolocation)!=u)
                        {
                                provider=bondi.geolocation;
                        }
                        else if (typeof(navigator.geolocation)!=u)
                        {
                                provider=navigator.geolocation;
                                pub.getCurrentPosition = function(success, error, opts)
                                {
                                        function _success(p)
                                        {
                                                //for mozilla geode,it returns the coordinates slightly differently
                                                if(typeof(p.latitude)!=u)
                                                {
                                                        success({timestamp:p.timestamp, coords: {latitude:p.latitude,longitude:p.longitude}});
                                                }
                                                else
                                                {
                                                        success(p);
                                                }
                                        }
                                        provider.getCurrentPosition(_success,error,opts);
                                }
                        }
                        else if(typeof(window.blackberry)!=u && blackberry.location.GPSSupported)
                        {

                                // set to autonomous mode
								if(typeof(blackberry.location.setAidMode)==u)
								{
	                                return false;									
								}
								blackberry.location.setAidMode(2);
                                //override default method implementation
                                pub.getCurrentPosition = function(success,error,opts)
                                {
										//alert(parseFloat(navigator.appVersion));
                                        //passing over callbacks as parameter didn't work consistently
                                        //in the onLocationUpdate method, thats why they have to be set
                                        //outside
                                        bb_success=success;
                                        bb_error=error;
                                        //function needs to be a string according to
                                        //http://www.tonybunce.com/2008/05/08/Blackberry-Browser-Amp-GPS.aspx
										if(opts['timeout'])  
										{
										 	bb_blackberryTimeout_id=setTimeout("handleBlackBerryLocationTimeout()",opts['timeout']);
										}
										else
										//default timeout when none is given to prevent a hanging script
										{
											bb_blackberryTimeout_id=setTimeout("handleBlackBerryLocationTimeout()",60000);
										}										
										blackberry.location.onLocationUpdate("handleBlackBerryLocation()");
                                        blackberry.location.refreshLocation();
                                }
                                provider=blackberry.location;				
                        }
					 	else if(typeof(window.google)!="undefined" && typeof(google.gears)!="undefined")
                        {
                                provider=google.gears.factory.create('beta.geolocation');
                                pub.getCurrentPosition = function(successCallback, errorCallback, options)
                                {
                                        function _successCallback(p)
                                        {
                                                if(typeof(p.latitude)!="undefined")
                                                {
                                                        successCallback({timestamp:p.timestamp, coords: {latitude:p.latitude,longitude:p.longitude}});
                                                }
                                                else
                                                {
                                                        successCallback(p);
                                                }
                                        }
                                        provider.getCurrentPosition(_successCallback,errorCallback,options);
                                }

                        }
                        else if ( typeof(Mojo) !=u && typeof(Mojo.Service.Request)!="Mojo.Service.Request")
                        {
                                provider=true;
                                pub.getCurrentPosition = function(success, error, opts)
                                {

                                parameters={};
                                if(opts)
                                {
                                         //http://developer.palm.com/index.php?option=com_content&view=article&id=1673#GPS-getCurrentPosition
                                         if (opts.enableHighAccuracy && opts.enableHighAccuracy==true)
                                         {
                                                parameters.accuracy=1;
                                         }
                                         if (opts.maximumAge)
                                         {
                                                parameters.maximumAge=opts.maximumAge;
                                         }
                                         if (opts.responseTime)
                                         {
                                                if(opts.responseTime<5)
                                                {
                                                        parameters.responseTime=1;
                                                }
                                                else if (opts.responseTime<20)
                                                {
                                                        parameters.responseTime=2;
                                                }
                                                else
                                                {
                                                        parameters.timeout=3;
                                                }
                                         }
                                }


                                 r=new Mojo.Service.Request('palm://com.palm.location', {
                                        method:"getCurrentPosition",
                                            parameters:parameters,
                                            onSuccess: function(p){success({timestamp:p.timestamp, coords: {latitude:p.latitude, longitude:p.longitude,heading:p.heading}});},
                                            onFailure: function(e){
                                                                if (e.errorCode==1)
                                                                {
                                                                        error({code:3,message:"Timeout"});
                                                                }
                                                                else if (e.errorCode==2)
                                                                {
                                                                        error({code:2,message:"Position unavailable"});
                                                                }
                                                                else
                                                                {
                                                                        error({code:0,message:"Unknown Error: webOS-code"+errorCode});
                                                                }
                                                        }
                                            });
                                }

                        }
                        else if (typeof(device)!=u && typeof(device.getServiceObject)!=u)
                        {
                                provider=device.getServiceObject("Service.Location", "ILocation");

                                //override default method implementation
                                pub.getCurrentPosition = function(success, error, opts)
                                {
                                        function callback(transId, eventCode, result) {
                                            if (eventCode == 4)
                                                {
                                                error({message:"Position unavailable", code:2});
                                            }
                                                else
                                                {
                                                        //no timestamp of location given?
                                                        success({timestamp:null, coords: {latitude:result.ReturnValue.Latitude, longitude:result.ReturnValue.Longitude, altitude:result.ReturnValue.Altitude,heading:result.ReturnValue.Heading}});
                                                }
                                        }
                                        //location criteria
                                    var criteria = new Object();
                                criteria.LocationInformationClass = "BasicLocationInformation";
                                        //make the call
                                        provider.ILocation.GetLocation(criteria,callback);
                                }
                        }

                }
                catch (e){ 
					if(typeof(console)!=u)
					{
						console.log(e);
					}
					return false;
				}
                return  provider!=null;
        }


        return pub;
}();;
/// END sites/all/modules/xlogic/xnodes/js/geo.js ///

/// BEGIN sites/all/modules/xlogic/xnodes/js/xmap.js ///
$(document).on('xpopup_window_ready', function(e, boxCtrl) { // Подключение API карты и инициация.
  var geoForm = $('.b-geo-form', boxCtrl.getStorage().getElements().$box);

  if (geoForm.size() > 0 && typeof (ymaps) == 'undefined') {
    $.getScript(geoForm.attr('rel'), function() {
      XSyst.attachBehaviors();
    });
  } else if (geoForm.size() > 0 && typeof (ymaps) != 'undefined') {
    delete(window.placemark);
    delete(window.myMap);
  }
});

XSyst.onReady('xnodesXMap', function(context){
  // Навешиваем событие клика по кнопке Enter при введеном адресе.
  $('.b-geo-form .b-geo-form__address-text', context).once().focus(function(){
    if (window.geoFormEventKeyDownEnabled != 1){
      window.geoFormEventKeyDownEnabled = 1;
      var el = $(this);
      $(window).keydown(function(e){
        if (e.which == 13) submitSearchMapForm(el);
      });
    }
  });
});

// API ФУНКЦИИ РАБОТЫ С КАРТАМИ.

/*
 * Ф-ция выполняет вставку bbcode тега geomap в активный textarea.
 */
function submitSetBBcodeMap(){
  var geoForm = $('.b-geo-form');
  var coords = $.cookie('mapCoords');
  var comment = $('.b-geo-form__comment-textarea', geoForm).val();

  if (typeof(coords) == "undefined" || coords == null) {
    $.noticeAdd({text: XSyst.t('You did not specify a point on the map'),position: 'center',type: 'error'});
  } 
  else {
    $.cookie('mapCoords', null);
    var code = '[geomap=' + coords + ']' + comment + '[/geomap]';

    if (typeof(BUE) == 'undefined' || typeof(BUE.active) == 'undefined'){
      $.xpopup.close();
      $('.b-light-editor-textarea._focus').xnodesLightEditorInsert("\n" + code + "\n", null, null);
    } 
    else {
      if (BUE.active.getSelection().length == 0){
        BUE.active.replaceSelection("\n" + code + "\n", 'end');
        $.xpopup.close();
        BUE.active.focus();
      }
    }
  }

  return false;
}

/*
 * Ф-ция формирует и выполняет поисковый запрос по адресу.
 */
function submitSearchMapForm(el){
  var field = el.parents('.b-geo-form').find('.b-geo-form__address-text');
  var address = field.val();
  var placeholder = field.attr('placeholder');
  var msg = '';

  if (address == '' || address == placeholder) {
    msg = XSyst.t('You did not fill address field.');
  } 
  else if (address.length < 3){
    msg = XSyst.t('Address field must contain at least 3 characters.');
  }

  if (msg != ''){
    $.noticeAdd({
      text: msg,
      position: 'center',
      type: 'error'
    });
  } 
  else {
    ymaps.ready(function(){
      ymaps.geocode(address, {results: 1}).then(function (res) {
        var firstGeoObject = res.geoObjects.get(0); // Выбираем первый результат геокодирования
        var coordinates = firstGeoObject.geometry.getCoordinates();

        $.cookie('mapCoords', coordinates);

        if (typeof(window.placemark) == "undefined") {
          var myMap = geoPreviewMapInit(ymaps, firstGeoObject.geometry.getCoordinates());
          geoPreviewMapEventClick(ymaps, myMap); // Добавляем событие клика по карте.
          geoPreviewMapMarker(ymaps, myMap, coordinates);
        } 
        else {
          window.myMap.setCenter(coordinates);
          window.placemark.geometry.setCoordinates(coordinates);
        }
      }, function (err) { // Если геокодирование не удалось, сообщаем об ошибке
        $.noticeAdd({text: err.message,position: 'center',type: 'error'});
      });
    });
  }

  return false;
}

/*
 * Добавляем маркер на карту.
 * ymaps - объект API карты.
 * myMap - объект карты.
 * coordinates - координаты центра карты.
 */
function geoPreviewMapMarker(ymaps, myMap, coordinates){
  if (typeof(window.placemark) == "undefined"){
    window.placemark = new ymaps.Placemark(coordinates, {}, {preset: 'twirl#blueDotIcon', draggable: true});
    $.cookie('mapCoords', coordinates);
    myMap.geoObjects.add(window.placemark).events.add("dragend", function(event) { // или drag проверить
      $.cookie('mapCoords', window.placemark.geometry.getCoordinates());
    });
  }
}

/*
 * Активируем и подгружаем карту.
 * ymaps - объект API карты.
 * coordinates - координаты центра карты.
 */
function geoPreviewMapInit(ymaps, coordinates){
  // Создаём карту. Устанавливаем центр и коэффициент масштабирования.
  window.myMap = new ymaps.Map("geo-form-map-preview", {center: coordinates, zoom: 14});
  window.myMap.controls.add("zoomControl");
  window.myMap.controls.add("typeSelector");
  
  return window.myMap;
}

/*
 * Ф-ция реагирует на клики по карте.
 * ymaps - объект API карты.
 * myMap - объект карты.
 */
function geoPreviewMapEventClick(ymaps, myMap){
  // Обработка события, возникающего при щелчке левой кнопкой мыши в любой точке карты.
  myMap.events.add('click', function (e) {
    var coords = e.get('coordPosition');
    window.placemark.geometry.setCoordinates(coords);
    $.cookie('mapCoords', coords);
  });
}

/*
 * Ф-ция запрашивает данные о гео позиции из бразуера.
 */
function submitGetUserMapForm(el){
  ymaps.geolocation.get({
    provider: 'browser',
    autoReverseGeocode: true
  }).then(function(result) {
    submitGetUserMapFormSuccessCallback(result.geoObjects.position);
  });
}

/*
 * Ф-ция получает данные гео позиции и наносит точку на карту.
 * p - объект с координатами.
 */
function submitGetUserMapFormSuccessCallback(p){
  var coordinates = [p[0], p[1]];

  $.cookie('mapCoords', coordinates);

  if (typeof(window.placemark) == "undefined") {
    ymaps.ready(function(){
      var myMap = geoPreviewMapInit(ymaps, coordinates);
      geoPreviewMapEventClick(ymaps, myMap); // Добавляем событие клика по карте.
      geoPreviewMapMarker(ymaps, myMap, coordinates);
    });
  } 
  else {
    window.myMap.setCenter(coordinates);
    window.placemark.geometry.setCoordinates(coordinates);
  }
};
/// END sites/all/modules/xlogic/xnodes/js/xmap.js ///

